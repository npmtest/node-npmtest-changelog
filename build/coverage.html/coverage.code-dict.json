{"/home/travis/build/npmtest/node-npmtest-changelog/test.js":"/* istanbul instrument in package npmtest_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-changelog/lib.npmtest_changelog.js":"/* istanbul instrument in package npmtest_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_changelog = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_changelog = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-changelog/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-changelog && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_changelog */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_changelog\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_changelog.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_changelog.rollup.js'] =\n            local.assetsDict['/assets.npmtest_changelog.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_changelog.__dirname + '/lib.npmtest_changelog.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/changelog.js":"\"use strict\";\n\nvar npm = require('./datasrc/npm');\nvar github = require('./datasrc/github');\nvar versionFilter = require('./util/versionFilter');\nvar log = require('./log');\n\nfunction processNpmAndGithubData(data, versionRequested) {\n\n    var project;\n    var versions = data.filteredVersions || data.versions;\n\n    if (data) {\n        project = data.project;\n    }\n\n    if (data && data.changes) {\n\n        if (data.changes[0].date > versions[0].date) {\n            versions.unshift({ version: 'Upcoming', date: data.changes[0].date, upcoming: true });\n        }\n\n        data.changes.forEach(function(change){\n\n            var i;\n            // DYLAN SOMEWHERE HERE?\n            if (change) {\n\n\n                for (i = versions.length - 1; i > 0; i--) {\n                    if (change.date < versions[i].date) {\n                        break;\n                    }\n                }\n\n                versions[i].changes = versions[i].changes || [];\n                versions[i].changes.push(change);\n            }\n        });\n    }\n\n    var filteredVersions = versionFilter(versions, versionRequested);\n\n    return {\n        project:  project,\n        versions: filteredVersions\n    };\n}\n\nfunction generate(project, versionRequested) {\n\n    if (!project) {\n        return new Error('Need help? --help or more help at https://github.com/dylang/changelog');\n    }\n\n    if (project.match(/github.com/)) {\n        var repo = project.match(/github\\.com\\/([^\\/]*\\/[^\\/]*)/);\n        if (repo && repo[1]) {\n            repo = repo[1].replace(/\\.git$/, '');\n            log.debug('using github repo ' + repo);\n            return github.changelog(repo, versionRequested);\n        }\n\n        return new Error('Bad repo url: ' + project);\n    }\n\n    if (project.split('/').length === 2) {\n        log.debug('using github repo ' + project);\n        return github.changelog(project, versionRequested);\n    }\n\n    log.debug('using npm module ' + project);\n    return npm.packageHistory(project)\n        .then(github.commitMessages)\n        .then(function(data) {\n            return processNpmAndGithubData(data, versionRequested);\n        });\n    }\n\nmodule.exports = {\n    generate: generate,\n    markdown: require('./output/markdown'),\n    terminal: require('./output/terminal')\n};\n","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/datasrc/npm.js":"\"use strict\";\n\nvar request = require('request');\nvar semver = require('semver');\nvar log = require('../log');\nvar q = require('q');\nvar _  = require('lodash');\n\nfunction sortDate (a, b) {\n    if (a.date < b.date) { return 1; }\n    if (a.date > b.date) { return -1; }\n    return 0;\n}\n\nfunction findRepoUrl(data) {\nvar repo = '';\n    ['repository', 'repositories', 'bugs', 'licenses'].forEach(function(branch){\n        if (!repo) {\n            var repoTree = data[branch];\n            if (repoTree) {\n                repo = repoTree.url;\n                if (!repo) {\n                    repoTree = repoTree[0];\n                    repo = repoTree.url;\n                }\n            }\n        }\n    });\n    return repo;\n}\n\nfunction packageHistory(moduleName) {\n    var deferred = q.defer();\n    var url = 'http://registry.npmjs.org/' + moduleName;\n    log.debug('requesting: ' + url);\n\n    request({ uri: url, json: true }, function (err, res, data) {\n        log.debug('complete: ' + url);\n\n        if (err) {\n            return deferred.reject(new Error(err));\n        }\n\n        if (!data) {\n            return deferred.reject('No data for ' + url);\n        }\n\n        if (data.error === 'not_found') {\n            return deferred.reject('Npm module ' + moduleName + ' was not found.');\n        }\n\n        var repo = findRepoUrl(data);\n\n        if (!repo && data.versions) {\n            Object.keys(data.versions).forEach(function(version) {\n                if (!repo) {\n                    repo = findRepoUrl(data.versions[version]);\n                }\n            });\n        }\n\n        if (!repo) {\n            var author;\n            if (data.author) {\n                author = data.author.name || 'Creator of Module';\n\n                if (data.author.email || data.author.url) {\n                    author = author + ' (' + (data.author.email || data.author.url) + ')';\n                }\n            }\n\n            return deferred.reject((author ? author : 'Owner of module ') + ' did not specify the repository url in the package.json for ' + moduleName + '. You should let the author know.');\n        }\n\n        if (!data.time) {\n            return deferred.reject('No published versions for ' + moduleName);\n        }\n\n        var time = data.time;\n        delete time.created;\n        delete time.modified;\n\n        var versions = Object.keys(time)\n            .map(function(version){\n                if (semver.valid(version)) {\n                    return {\n                        version: version,\n                        date: new Date(time[version])\n                    };\n                }\n            });\n\n        versions = _.compact(versions)\n            .sort(sortDate);\n\n\n        deferred.resolve({\n            repo: repo,\n            versions: versions\n        });\n    });\n\n    return deferred.promise;\n}\n\nmodule.exports = {\n    packageHistory: packageHistory\n};\n","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/log.js":"\"use strict\";\n\nvar chalk = require('chalk');\n\nvar showDebugMessages;\n\nfunction debug(message) {\n    if (showDebugMessages) {\n        console.info(chalk.green('changelog'), message);\n    }\n}\n\nfunction error(message) {\n    console.error(chalk.red('changelog'), message);\n}\n\nfunction enableDebug(bool) {\n    showDebugMessages = bool;\n}\n\nmodule.exports = {\n    debug:  debug,\n    error:  error,\n    enableDebug: enableDebug\n};\n","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/datasrc/github.js":"\"use strict\";\n\nvar URL     = require('url');\nvar request = require('request');\nvar userAgent = require('../util/userAgent');\nvar log     = require('../log');\nvar moment = require('moment');\nvar q = require('q');\n\nfunction commitMessages(options) {\n    var deferred = q.defer();\n\n    // TODO: better argument check and url fix, or just use npm project name\n    var repoURL = URL.parse(options.repo.replace(/\\.git$/, ''));\n    var project = repoURL.pathname;\n\n    if (!project) {\n        deferred.reject(new Error('that\\'s no github url i know of'));\n    }\n\n    // remove leading /'s\n    project = project.replace(/^\\//g, '');\n\n    var url = 'https://api.github.com/repos/' + project + '/commits?per_page=250';\n    log.debug('requesting: ' + url);\n\n    request({uri: url, json: true, headers: {'User-Agent': userAgent}}, function (err, res, data) {\n        log.debug('complete: ' + url);\n\n        if (err) {\n            return deferred.reject(err);\n        }\n\n        if (!data.map) {\n            return deferred.reject('Unknown Github Repo: ' + options.repo + '. ' + (data.message || JSON.stringify(data)));\n        }\n\n        var changes = data.map(function(change){\n            var date = new Date(change.commit.committer.date);\n            var message = change.commit.message;\n            return {\n                date:       date,\n                message:    message\n            };\n        });\n\n        deferred.resolve({\n            project: {\n                github:     project,\n                repository: 'https://github.com/' + project\n            },\n            changes: changes,\n            versions: options.versions\n        });\n    });\n    return deferred.promise;\n}\n\nfunction changelog(repo, releaseRequested) {\n    return commitMessages({repo: repo})\n        .then(function(data) {\n\n\n            var versionsArray = [];\n            var versionsCache = {};\n\n            if (data && data.changes) {\n                data.changes.forEach(function(change){\n                    if (change) {\n                        var date = change.date;\n                        var simpleDate = moment(date).format(\"YYYY-MM-DD\");\n                        versionsCache[simpleDate] = versionsCache[simpleDate] || { date: new Date(simpleDate), changes: [] };\n                        versionsCache[simpleDate].changes.push(change);\n                    }\n                });\n            }\n\n            Object.keys(versionsCache).forEach(function(simpleDate) {\n                versionsArray.push(versionsCache[simpleDate]);\n            });\n\n            // THIS SHOULD GO AWAY\n            if (releaseRequested) {\n                var tmpVersions = [];\n                var i;\n\n                // All == all versions\n                if (releaseRequested.toString().toLowerCase() === 'all') {\n                    tmpVersions = versionsArray;\n                }\n                // Latest == Latest single version\n                else if (releaseRequested.toString().toLowerCase() === 'latest') {\n                    tmpVersions.push(versionsArray[0]);\n                // Integer == that many versions.  1 = one version.\n                } else if (parseInt(releaseRequested, 10) === releaseRequested) {\n                      for (i = 0; i < Math.min(releaseRequested, versionsArray.length - 1); i++) {\n                            tmpVersions.push(versionsArray[i]);\n                        }\n                // Require valid version\n                } else {\n                    throw new Error('Github\\'s API does not yet support release versions. See https://github.com/github/developer.github.com/issues/17 for more info.');\n                }\n                versionsArray = tmpVersions;\n            }\n\n            return{\n                project:    data.project,\n                versions:   versionsArray\n            };\n        });\n}\n\nmodule.exports = {\n    commitMessages: commitMessages,\n    changelog: changelog\n};\n","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/util/userAgent.js":"var pkg = require('../../package.json');\nmodule.exports = pkg.name + ' ' + pkg.version + ' ' + pkg.homepage;","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/util/versionFilter.js":"'use strict';\nvar semver = require('semver');\n\nfunction versionFilter(versions, filter) {\n\n    if (!versions || !versions.length) {\n        throw new Error('No versions found');\n    }\n\n    var filterWord = (filter || '').toString().toLowerCase();\n\n    // Upcoming == Show what's in the pipeline for the next release\n    if (filterWord === 'upcoming') {\n        return versions.filter(function(version){\n            return version.upcoming;\n        });\n    }\n\n    var filterCount = filterWord === 'latest' ? 1\n                      : filterWord === 'all' ? versions.length\n                      : filterWord === '' ? versions.length\n                      : !isNaN(filter) && Math.round(filter) === parseInt(filter, 10) ? parseInt(filter, 10)\n                      : false;\n\n    var releasedVersions = versions.filter(function(version){\n        return !version.upcoming;\n    });\n\n    // Integer == that many versions.  1 = one version.\n    if (filterCount) {\n        return releasedVersions.filter(function(version, i) {\n            return i < filterCount;\n        });\n    }\n\n    if (semver.validRange(filter)) {\n        return releasedVersions.filter(function(Version) {\n            return semver.valid(Version.version) && semver.satisfies(Version.version, filter);\n        });\n    }\n\n    // Require valid version\n    throw new Error('Invalid version syntax. Versions can be latest, an integer, or n.n.n where n are integers.');\n}\n\nmodule.exports = versionFilter;\n\n","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/output/markdown.js":"\"use strict\";\n\nvar moment = require('moment');\nvar bullet = require('../util/bullet');\n\nfunction markdown(data) {\n    var output = [];\n\n    data.versions.map(function(version, i){\n        if (version.changes) {\n            var date = version.date;\n            var versionString = (version.version ? version.version + ' / ' : '') +\n                    moment(date).format(\"YYYY-MM-DD\");\n\n            // add a blank line between sections\n            if (i > 0) {\n                output.push('');\n            }\n\n            output.push(versionString);\n            output.push(new Array(versionString.length + 1).join('='));\n            output.push('');\n\n            var uniqueChanges = {};\n            version.changes.forEach(function(change){\n                if (!uniqueChanges[change.message]) {\n                    var message = change.message;\n                    if (data.project && data.project.github) {\n                        message = message.replace(/#([0-9]+)/g, '[#$1](https://github.com/' + data.project.github + '/issues/$1' + ')');\n                    }\n                    output.push(bullet(message, '*', true));\n                }\n                uniqueChanges[change.message] = true;\n            });\n        }\n    });\n\n    return output.join('\\n');\n}\n\nmodule.exports = markdown;","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/util/bullet.js":"\"use strict\";\n\nvar indent = 4;\nvar wordwrap = require('wordwrap');\n\nfunction bullet(string, bulletCharacter, noWrap) {\n\n    function wrap(str) {\n        var columns = !noWrap && process.stdout.columns || 100000;\n\n        return wordwrap(indent, columns)(str).trim();\n    }\n\n    string = string.replace(/(\\r?\\n)+/g, '\\n');\n\n    return '  ' + (bulletCharacter || '*') + ' ' + wrap(string);\n}\n\nmodule.exports = bullet;","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/lib/output/terminal.js":"\"use strict\";\n\nvar chalk = require('chalk');\nvar moment = require('moment');\nvar bullet = require('../util/bullet');\n\nfunction terminal(data) {\n\n    var output = [];\n\n    data.versions.map(function(version, i){\n\n\n        var date = version.date;\n        var versionString = (version.version ? version.version + ' / ' : '') +\n                moment(date).format(\"YYYY-MM-DD\");\n\n        // add a blank line between sections\n        if (i > 0) {\n            output.push('');\n        }\n\n        output.push(chalk.yellow(versionString));\n\n\n        if (!version.changes) {\n            return output.push(bullet('Changelog not found.'));\n        }\n\n\n        var uniqueChanges = {};\n        version.changes.forEach(function(change){\n            if (!uniqueChanges[change.message]) {\n                var message = change.message\n                    .replace(/([^`]*)`([^`]*)`([^`]*)/g, '$1' + chalk.green('$2') + '$3')\n                    .replace(/#([0-9]+)/g, chalk.blue.underline('https://github.com/' + data.project.github + '/issues/$1'))\n                    .replace(/^(\\[[^\\]]*\\])/, chalk.cyan('$1'));\n                output.push(bullet(message));\n            }\n            uniqueChanges[change.message] = true;\n        });\n    });\n\n    return output.join('\\n');\n}\n\nmodule.exports = terminal;\n","/home/travis/build/npmtest/node-npmtest-changelog/node_modules/changelog/Gruntfile.js":"/*\n * Copyright (c) 2013 Dylan Greene\n * Licensed under the MIT license.\n */\n'use strict';\n\n\n\nmodule.exports = function (grunt) {\n    require('time-grunt')(grunt);\n    grunt.initConfig({\n        mochaTest: {\n            notify: {\n                src: 'test/**/*.test.js',\n                options: {\n                    timeout: 10000,\n                    ui: 'bdd',\n                    reporter: 'spec'\n                }\n            }\n        },\n        jshint: {\n            options: {\n                node: true, // node's globals\n                force: true,        // don't stop when there is an error\n                maxerr: 10000,      // keep running no matter how many errors were found\n                globalstrict: true, // allows 'use strict' with single quotes\n                newcap: false       // allows  functions to be capitalized without New\n            },\n            gruntfile: {\n                options: {\n                },\n                files: {\n                    src: [\n                        'Gruntfile.js'\n                    ]\n                }\n            },\n            lib: {\n                options: {\n                    globals: {\n                    }\n                },\n                files: {\n                    src: [\n                        'lib/**/*.js'\n                    ]\n                }\n            },\n            test: {\n                options: {\n                    expr: true,         // allow expressions like foo.ok;\n                    globals: {\n                        it: true,\n                        xit: true,\n                        expect: true,\n                        runs: true,\n                        waits: true,\n                        waitsFor: true,\n                        beforeEach: true,\n                        afterEach: true,\n                        describe: true,\n                        xdescribe: true\n                    }\n                },\n                files: {\n                    src: 'test/**/*.js'\n                }\n            }\n        },\n        watch: {\n            test: {\n                files: [\n                    'Gruntfile.js',\n                    'lib/**/*',\n                    'test/**/*'\n                ],\n                tasks: ['test'],\n                options: {\n                    nospawn: true\n                }\n            }\n        },\n        readme: {\n            options: {\n                readme: 'templates/README.md.tmpl',\n                contributing: false\n            }\n        }\n    });\n\n    // Actually load this plugin's task(s).\n    require('load-grunt-tasks')(grunt);\n\n    // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n    // plugin's task(s), then test the result.\n    grunt.registerTask('test', ['mochaTest']);\n\n    // By default, lint and run all tests.\n    grunt.registerTask('default', ['jshint', 'test']);\n};\n"}